# Function to Authenticate to AWS and Assume Role (if needed)
function Authenticate-AWS {
    param (
        [string]$AccessKey,
        [string]$SecretKey,
        [string]$SessionToken,
        [string]$Region,
        [string]$RoleArn  # Optional: Assume Role for cross-account access
    )

    # Step 1: Create AWS Credential Object
    $awsCredential = New-Object Amazon.Runtime.BasicAWSCredentials($AccessKey, $SecretKey)

    # Step 2: Assume Role for Cross-Account Access (if provided)
    if ($RoleArn) {
        Write-Host "Assuming role: $RoleArn ..." -ForegroundColor Yellow

        # Assume the IAM Role
        $stsResponse = Use-STSRole -RoleArn $RoleArn -RoleSessionName "CrossAccountSession" -Credential $awsCredential

        # Create a new AWS credential object with the assumed role's temporary credentials
        $awsCredential = New-Object Amazon.Runtime.SessionAWSCredentials(
            $stsResponse.Credentials.AccessKeyId,
            $stsResponse.Credentials.SecretAccessKey,
            $stsResponse.Credentials.SessionToken
        )

        Write-Host "Successfully assumed role: $RoleArn" -ForegroundColor Green
    }

    # Step 3: Set the default AWS region
    Set-DefaultAWSRegion -Region $Region
    Write-Host "AWS Authentication Successful" -ForegroundColor Green

    # Return AWS Credential Object
    return $awsCredential
}

# Function to Update AWS Secret Value using Put-SECSecretValue
function Update-SecretValue {
    param (
        [string]$SecretName,
        [string]$NewPassword,
        [object]$AwsCredential
    )

    try {
        # Ensure the AWS Secrets Manager module is installed
        if (-not (Get-Module -ListAvailable -Name AWS.Tools.SecretsManager)) {
            Write-Host "Installing AWS.Tools.SecretsManager module..." -ForegroundColor Yellow
            Install-Module -Name AWS.Tools.SecretsManager -Force -Scope AllUsers
        }

        # Convert new password to JSON format
        $newSecretValue = @{ password = $NewPassword } | ConvertTo-Json -Compress

        # Update the secret value using AWS credential object
        Put-SECSecretValue -SecretId $SecretName -SecretString $newSecretValue -Credential $AwsCredential

        Write-Host "Secret '$SecretName' value updated successfully." -ForegroundColor Green
    }
    catch {
        Write-Host "Error updating secret value: $_" -ForegroundColor Red
    }
}

# Example Usage:

# Authenticate and get AWS Credential Object
$awsCreds = Authenticate-AWS -AccessKey "YourAccessKey" -SecretKey "YourSecretKey" -Region "us-east-1" -RoleArn "arn:aws:iam::123456789012:role/CrossAccountRole"

# Update AWS Secret Value using the credential object
Update-SecretValue -SecretName "my-secret-name" -NewPassword "MyNewSecurePassword!" -AwsCredential $awsCreds
