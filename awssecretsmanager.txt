# Function to Authenticate to AWS and Assume Role (if needed)
function Authenticate-AWS {
    param (
        [string]$AccessKey,
        [string]$SecretKey,
        [string]$SessionToken,
        [string]$Region,
        [string]$RoleArn  # Optional: Assume Role for cross-account access
    )

    # Step 1: Set AWS Credentials (Only if provided)
    if ($AccessKey -and $SecretKey) {
        Set-AWSCredential -AccessKey $AccessKey -SecretKey $SecretKey -SessionToken $SessionToken -StoreAs "MyAWSSession"
        Write-Host "AWS Credentials set successfully." -ForegroundColor Green
    }

    # Step 2: Assume Role for Cross-Account Access (If RoleArn is provided)
    if ($RoleArn) {
        Write-Host "Assuming role: $RoleArn ..." -ForegroundColor Yellow

        # Ensure we have valid credentials before assuming the role
        $activeCredentials = Get-AWSCredential -StoredCredentials "MyAWSSession"
        if (-not $activeCredentials) {
            Write-Host "Error: No valid AWS credentials found before assuming the role!" -ForegroundColor Red
            return
        }

        # Assume the role
        $stsResponse = Use-STSRole -RoleArn $RoleArn -RoleSessionName "CrossAccountSession"

        # Store the new assumed credentials
        Set-AWSCredential -AccessKey $stsResponse.Credentials.AccessKeyId `
                          -SecretKey $stsResponse.Credentials.SecretAccessKey `
                          -SessionToken $stsResponse.Credentials.SessionToken `
                          -StoreAs "MyAWSSession"

        Write-Host "Successfully assumed role: $RoleArn" -ForegroundColor Green
    }

    # Step 3: Set the default AWS region
    Set-DefaultAWSRegion -Region $Region
    Write-Host "AWS Authentication Successful" -ForegroundColor Green
}

# Function to Update a Secret in AWS Secrets Manager
function Update-SecretValue {
    param (
        [string]$SecretName,
        [string]$NewPassword
    )

    try {
        # Convert the new password into JSON format
        $newSecretValue = @{ password = $NewPassword } | ConvertTo-Json -Compress

        # Update the secret
        Update-SECSecretValue -SecretId $SecretName -SecretString $newSecretValue

        Write-Host "Secret '$SecretName' updated successfully." -ForegroundColor Green
    }
    catch {
        Write-Host "Error updating secret: $_" -ForegroundColor Red
    }
}

# Example Usage:
# Authenticate with AWS (either via credentials or assumed role)
Authenticate-AWS -AccessKey "YourAccessKey" -SecretKey "YourSecretKey" -Region "us-east-1" -RoleArn "arn:aws:iam::123456789012:role/CrossAccountRole"

# Update a Secret
Update-SecretValue -SecretName "my-secret-name" -NewPassword "MyNewSecurePassword!"
